//
//  ClipEditViewController.swift
//  TSClipEditor
//
//  Created by Antelis on 21/06/2017.
//  Copyright Â© 2017 shion. All rights reserved.
//

//
// MARK: - ClipEditViewController: VC for displaying clip thumbnails and handling slider functions
//

import Cocoa

protocol  MultipleRangeSliderDelegate {
    func focusedSliderChanged(focused:AnyObject?, start:Float, end:Float, view:Bool)
}
class ClipEditViewController: NSViewController, MultipleRangeSliderDelegate,NSPopoverDelegate,ClipInfoDelegate {
    
    var vidInfo:VideoInfoProtocol?
    @IBOutlet weak var clipStartThumb : NSImageView!
    @IBOutlet weak var clipEndThumb : NSImageView!
    @IBOutlet weak var clipSlider : MultipleRangeSlider!
    @IBOutlet weak var playButton : NSButton!
    @IBOutlet weak var addButton : NSButton!
    @IBOutlet weak var tsLocation : NSTextField!
    @IBOutlet weak var discard : NSButton!
    
    //  popover for displaying Clip thumb info
    lazy var popover: NSPopover = {
        let popover = NSPopover()
        popover.behavior = .applicationDefined
        let storyboard = NSStoryboard(name: NSStoryboard.Name("Main"), bundle: nil)
        let controller = storyboard.instantiateController(withIdentifier: NSStoryboard.SceneIdentifier("popupcontent")) as! ThumbRangeInfoViewController
        controller.infoDelegate = self
        popover.contentViewController = controller
        popover.delegate = self
        return popover
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        clipSlider.sliderDelegate = self
        setHint()
    }
    
    //  shows a simple hint when launched
    func setHint(){
        let color = NSColor.lightGray
        let font = NSFont.systemFont(ofSize: 14)
        let paragraph = NSMutableParagraphStyle()
        paragraph.alignment = .center
        let attrs = [NSAttributedStringKey.foregroundColor: color, NSAttributedStringKey.font: font, NSAttributedStringKey.paragraphStyle: paragraph]
        let placeHolderStr = NSAttributedString(string: "- Please open a TS file to edit clips. -", attributes: attrs)
        tsLocation.alignment = .center
        (tsLocation.cell as! NSTextFieldCell).placeholderAttributedString = placeHolderStr
    }
    
    //  set thumbnail decoded from video to the start or the end
    func setThumbnailImage(image : CGImage, isEnd: Bool){
        
        if isEnd {
            self.clipEndThumb.image = nil
            self.clipEndThumb.image = NSImage(cgImage: image, size: self.clipEndThumb.frame.size)
        } else {
            self.clipStartThumb.image = nil
            self.clipStartThumb.image = NSImage(cgImage: image, size: self.clipStartThumb.frame.size)
        }
    }
    
    //  assign duration of the full video and number of calibration to the slider
    func setSliderRange(start: Int, end:Int, calibration: Int){
        clipSlider.setSliderRange(start: start, end: end, calibration: calibration)
        self.playButton.isHidden = false
    }
    
    //  actually delete the focused thumb
    func deleteFocusedSliderThumb(){
        popover.close()
        clipSlider.deleteFocusedThumb()
        
    }
    //  return the physical start and th end of the focused thumb
    func getFocusedSliderRange() -> NSPoint{
        let r = clipSlider.getFocusedClipPortion()
        return r
    }
    
    //  MARK: - Util -
    //  shows an alert
    func dialogOKCancel(question: String, text: String) -> Bool {
        let alert = NSAlert()
        alert.messageText = question
        alert.informativeText = text
        alert.alertStyle = NSAlert.Style.warning
        alert.addButton(withTitle: "OK")
        alert.addButton(withTitle: "Cancel")
        return alert.runModal() == NSApplication.ModalResponse.alertFirstButtonReturn
    }
    //  get a file generated by tick
    func getClipNameWithTick() -> String{
        
        let tick = llround(Date().timeIntervalSince1970)
        return String(format: "TSClip_%lld.ts", tick)
        
    }
    
    // MARK: - handling clip saving progress -
    // pass saving progress to popover
    func updateSaveProgress(_ increment: Int,_ max:Int){
        let info = popover.contentViewController as! ThumbRangeInfoViewController
        info.updateSaveProgress(increment: increment, max: max)
    }
    func finishSaveProgress(){
        let info = popover.contentViewController as! ThumbRangeInfoViewController
        info.finishSaveProgress()
    }
    
    
    // MARK: - MultipleRangeSliderDelegate -
    // when focused thumb or its range is changed, VC will get notified
    // update the content of popover
    func focusedSliderChanged(focused:AnyObject?, start:Float, end:Float, view:Bool){
        vidInfo?.focusedThumbRangeChanged(focused: focused, start: start, end: end, sliderlength: Float(clipSlider.horizontalline.frame.width), view: view)
        let view = focused as! RangeSliderThumbView
        
        
        popover.show(relativeTo: view.bounds, of: view, preferredEdge: .minY)
        
        let info = popover.contentViewController as? ThumbRangeInfoViewController
        let sliderlength = Float(clipSlider.horizontalline.frame.width)
        let st = ceil(Float(start/sliderlength)*Float(clipSlider.end))
        let ed = ceil(Float(end/sliderlength)*Float(clipSlider.end))
        info?.clipRangeChanged(start: st, end: ed)
    }
    
    
    
    // MARK: - InfoDelegate -
    func discardTheThumb(){
        discardCurClip(self.discard)
    }
    func saveClipWithDestDirectory(destdir:String){
        let url = URL(fileURLWithPath: destdir)
        let fname = getClipNameWithTick()
        let dest = url.appendingPathComponent(fname)
        let info = popover.contentViewController as! ThumbRangeInfoViewController
        info.destLocation.stringValue = dest.path
        self.vidInfo?.saveClipAtLocation(source: self.tsLocation.stringValue, dest: dest.path)
        
    }
    
    //  MARK: - IBAction -
    @IBAction func playClip(_ sender: AnyObject!){
        self.vidInfo?.playVideoWithClipRange()
    }
    
    @IBAction func addClipRange(_ sender: AnyObject!){
        clipSlider.addClipSliderThumb()
    }
    
    @IBAction func openTS(_ sender: AnyObject!){
        if let url = NSOpenPanel().selectedFile {
            
            self.popover.close()
            self.tsLocation.stringValue = url.path
            self.vidInfo?.loadVideoWithPath(path: url.path)
            self.addButton.isHidden = false
            self.discard.isHidden = false
        }
    }
    @IBAction func discardCurClip(_ sender: AnyObject!){
        self.discard.resignFirstResponder()
        if dialogOKCancel(question: "Are you sure you want to discard the current clip?", text: "") {
            self.vidInfo?.deleteClipThumb()
        }
        
    }
}
